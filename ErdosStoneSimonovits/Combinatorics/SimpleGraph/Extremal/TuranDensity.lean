import Mathlib
import ErdosStoneSimonovits.Combinatorics.SimpleGraph.DeleteEdges
import ErdosStoneSimonovits.Combinatorics.SimpleGraph.Extremal.Basic
import ErdosStoneSimonovits.Order.Monotone.Basic

open Asymptotics Filter Finset Fintype Topology

namespace SimpleGraph

variable {V W : Type*} {G : SimpleGraph V} {H : SimpleGraph W}

lemma antitoneOn_extremalNumber_div_choose_two (H : SimpleGraph W) :
    AntitoneOn (fun n ‚Ü¶ (extremalNumber n H / n.choose 2 : ‚Ñù)) (Set.Ici 2) := by
  apply antitoneOn_nat_Ici_of_succ_le
  intro n hn
  conv_lhs =>
    enter [1, 1]
    rw [‚Üê Fintype.card_fin (n+1)]
  rw [div_le_iff‚ÇÄ (mod_cast Nat.choose_pos (by linarith)),
    extremalNumber_le_iff_of_nonneg H (by positivity)]
  intro G _ h
  rw [mul_comm, ‚Üê mul_div_assoc, le_div_iff‚ÇÄ' (mod_cast Nat.choose_pos hn), Nat.cast_choose_two,
    Nat.cast_choose_two, Nat.cast_add_one, add_sub_cancel_right (n : ‚Ñù) 1,
    mul_comm _ (n-1 : ‚Ñù), ‚Üê mul_div (n-1 : ‚Ñù), mul_comm _ (n/2 : ‚Ñù), mul_assoc, mul_comm (n-1 : ‚Ñù),
    ‚Üê mul_div (n+1 : ‚Ñù), mul_comm _ (n/2 : ‚Ñù), mul_assoc, mul_le_mul_left (by positivity),
    ‚Üê Nat.cast_pred (by positivity), ‚ÜêNat.cast_mul, ‚ÜêNat.cast_add_one, ‚ÜêNat.cast_mul, Nat.cast_le]
  conv_rhs =>
    rw [‚Üê Fintype.card_fin (n+1), ‚Üê card_univ]
  -- double counting `(v, e) ‚Ü¶ v ‚àâ e`
  apply card_nsmul_le_card_nsmul' (r := fun v e ‚Ü¶ v ‚àâ e)
  -- counting `e`
  ¬∑ intro e he
    simp_rw [‚Üê Sym2.mem_toFinset, bipartiteBelow, filter_not, filter_mem_eq_inter, univ_inter,
      ‚Üê compl_eq_univ_sdiff, card_compl, Fintype.card_fin, card_toFinset_mem_edgeFinset ‚ü®e, he‚ü©,
      Nat.cast_id, Nat.reduceSubDiff, le_refl]
  -- counting `v`
  ¬∑ intro v hv
    simpa [edgeFinset_deleteIncidenceSet_eq_filter]
      using card_edgeFinset_deleteIncidenceSet_le_extremalNumber h v

lemma bbdBelow_extremalNumber_div_choose_two (H : SimpleGraph W) :
    BddBelow { (extremalNumber n H / n.choose 2 : ‚Ñù) | n ‚àà Set.Ici 2 } := by
  refine ‚ü®0, fun x ‚ü®n, hn, hx‚ü© ‚Ü¶ ?_‚ü©
  rw [‚Üê hx]
  positivity

lemma tendsto_extremalNumber_div_choose_two (H : SimpleGraph W) :
    Tendsto (fun n ‚Ü¶ (extremalNumber n H / n.choose 2 : ‚Ñù)) atTop
      (ùìù (sInf { (extremalNumber n H / n.choose 2 : ‚Ñù) | n ‚àà Set.Ici 2 })) := by
  let f := fun n ‚Ü¶ (extremalNumber n H / n.choose 2 : ‚Ñù)
  have hf_Ici : f '' (Set.Ici 2) = Set.range (fun n ‚Ü¶ f (n + 2)) := by
    refine Set.ext fun x ‚Ü¶ ‚ü®fun ‚ü®n, hn, hfn‚ü© ‚Ü¶ ‚ü®n - 2, ?_‚ü©,
      fun ‚ü®n, hfn‚ü© ‚Ü¶ ‚ü®n + 2, Nat.le_add_left 2 n, hfn‚ü©‚ü©
    rwa [‚Üê Nat.sub_add_cancel hn] at hfn
  suffices h : Tendsto (fun n ‚Ü¶ f (n + 2)) atTop (ùìù (‚®Ö n, f (n + 2))) by
    rwa [tendsto_add_atTop_iff_nat 2, ‚Üê sInf_range, ‚Üê hf_Ici, Set.image] at h
  apply tendsto_atTop_ciInf
  ¬∑ rw [antitone_add_nat_iff_antitoneOn_nat_Ici]
    exact antitoneOn_extremalNumber_div_choose_two H
  ¬∑ rw [‚Üê hf_Ici, Set.image]
    exact bbdBelow_extremalNumber_div_choose_two H

/-- The **Tur√°n density** of a simple graph `H` is the limit of `extremalNumber n H / n.choose 2`
as `n` approaches `‚àû`.

See `SimpleGraph.tendsto_turanDensity` for proof of existence. -/
noncomputable def turanDensity (H : SimpleGraph W) :=
  limUnder atTop fun n ‚Ü¶ (extremalNumber n H / n.choose 2 : ‚Ñù)

theorem turanDensity_eq_sInf (H : SimpleGraph W) :
    turanDensity H = sInf { (extremalNumber n H / n.choose 2 : ‚Ñù) | n ‚àà Set.Ici 2 } :=
  (tendsto_extremalNumber_div_choose_two H).limUnder_eq

theorem turanDensity_le_extremalNumber_div_choose_two (H : SimpleGraph W) {n : ‚Ñï} (hn : n ‚â• 2) :
    turanDensity H ‚â§ extremalNumber n H / n.choose 2 := by
  rw [turanDensity_eq_sInf H]
  exact csInf_le (bbdBelow_extremalNumber_div_choose_two H) ‚ü®n, hn, rfl‚ü©

/-- The **Tur√°n density** of a simple graph `H` is well-defined. -/
theorem tendsto_turanDensity (H : SimpleGraph W) :
    Tendsto (fun n ‚Ü¶ (extremalNumber n H / n.choose 2 : ‚Ñù)) atTop (ùìù (turanDensity H)) := by
  rw [turanDensity_eq_sInf H]
  exact tendsto_extremalNumber_div_choose_two H

/-- `extremalNumber n H` is asymptotically equivalent to `turanDensity H * n.choose 2` as `n`
approaches `‚àû`. -/
theorem isEquivalent_extremalNumber (h : turanDensity H ‚â† 0) :
    (fun n ‚Ü¶ (extremalNumber n H : ‚Ñù)) ~[atTop] (fun n ‚Ü¶ (turanDensity H * n.choose 2 : ‚Ñù)) := by
  have hœÄ := tendsto_turanDensity H
  apply Tendsto.const_mul (1/turanDensity H : ‚Ñù) at hœÄ
  simp_rw [one_div_mul_cancel h, div_mul_div_comm, one_mul] at hœÄ
  have hz : ‚àÄ·∂† (x : ‚Ñï) in atTop, turanDensity H * x.choose 2 ‚â† 0 := by
    rw [eventually_atTop]
    refine ‚ü®2, fun n hn ‚Ü¶ ?_‚ü©
    simp [h, Nat.choose_eq_zero_iff, hn]
  simpa [isEquivalent_iff_tendsto_one hz] using hœÄ

end SimpleGraph
